/**
 * Remoteme rest for advanced integration
 * If You want i can hide it but there is nothing danger
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@remoteme.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.remoteme.client.api;

import org.remoteme.client.invoker.ApiException;
import org.remoteme.client.invoker.ApiInvoker;
import org.remoteme.client.invoker.Pair;

import org.remoteme.client.model.*;

import java.util.*;

import org.remoteme.client.model.AndroidRegisterDto;
import org.remoteme.client.model.DeviceDto;
import org.remoteme.client.model.DeviceFullDto;
import org.remoteme.client.model.RegisterDto;
import org.remoteme.client.model.StandardResponse;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class ArliterestdevicesApi {
  String basePath = "https://app.remoteme.org";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * createArduinoDevice
   * 
   * @param deviceDto deviceDto
   * @param aRLiteToken generated token
   * @return void
   */
  public void  createArduinoDevice (DeviceDto deviceDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = deviceDto;
    // verify the required parameter 'deviceDto' is set
    if (deviceDto == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceDto' when calling createArduinoDevice");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/device/arduino/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * createRasbperryPiDevice
   * 
   * @param deviceDto deviceDto
   * @param aRLiteToken generated token
   * @return void
   */
  public void  createRasbperryPiDevice (DeviceDto deviceDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = deviceDto;
    // verify the required parameter 'deviceDto' is set
    if (deviceDto == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceDto' when calling createRasbperryPiDevice");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/device/rasbperryPi/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * createWebpageDevice
   * 
   * @param deviceDto deviceDto
   * @param aRLiteToken generated token
   * @return void
   */
  public void  createWebpageDevice (DeviceDto deviceDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = deviceDto;
    // verify the required parameter 'deviceDto' is set
    if (deviceDto == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceDto' when calling createWebpageDevice");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/device/webPage/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return ;
      }
      else {
        return ;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * getDevices
   * 
   * @param aRLiteToken generated token
   * @return List<DeviceFullDto>
   */
  public List<DeviceFullDto>  getDevices (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/getAllDevices/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<DeviceFullDto>) ApiInvoker.deserialize(localVarResponse, "array", DeviceFullDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * isDeviceConnected
   * 
   * @param deviceId deviceId
   * @param aRLiteToken generated token
   * @return Boolean
   */
  public Boolean  isDeviceConnected (Integer deviceId, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'deviceId' is set
    if (deviceId == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceId' when calling isDeviceConnected");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/device/{deviceId}/connected/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}", apiInvoker.escapeString(deviceId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Boolean) ApiInvoker.deserialize(localVarResponse, "", Boolean.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Register
   * Registers device - return deviceId new or old one
   * @param registerDto registerDto
   * @param aRLiteToken generated token
   * @return RegisterDto
   */
  public RegisterDto  register (AndroidRegisterDto registerDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = registerDto;
    // verify the required parameter 'registerDto' is set
    if (registerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'registerDto' when calling register");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/register/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (RegisterDto) ApiInvoker.deserialize(localVarResponse, "", RegisterDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Register
   * Registers device - return deviceId new or old one
   * @param registerDto registerDto
   * @param aRLiteToken generated token
   * @return RegisterDto
   */
  public RegisterDto  registerEr (AndroidRegisterDto registerDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = registerDto;
    // verify the required parameter 'registerDto' is set
    if (registerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'registerDto' when calling registerEr");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/registerEr/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (RegisterDto) ApiInvoker.deserialize(localVarResponse, "", RegisterDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * updateMessageToken
   * 
   * @param deviceId deviceId
   * @param messageToken messageToken
   * @param aRLiteToken generated token
   * @return StandardResponse
   */
  public StandardResponse  updateMessageToken (Integer deviceId, String messageToken, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'deviceId' is set
    if (deviceId == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceId' when calling updateMessageToken");
    }
    // verify the required parameter 'messageToken' is set
    if (messageToken == null) {
       throw new ApiException(400, "Missing the required parameter 'messageToken' when calling updateMessageToken");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/addMessageToken/{deviceId}/{messageToken}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}", apiInvoker.escapeString(deviceId.toString())).replaceAll("\\{" + "messageToken" + "\\}", apiInvoker.escapeString(messageToken.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (StandardResponse) ApiInvoker.deserialize(localVarResponse, "", StandardResponse.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
