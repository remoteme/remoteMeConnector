/**
 * Remoteme rest for advanced integration
 * If You want i can hide it but there is nothing danger
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@remoteme.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.remoteme.client.api;

import org.remoteme.client.invoker.ApiException;
import org.remoteme.client.invoker.ApiInvoker;
import org.remoteme.client.invoker.Pair;

import org.remoteme.client.model.*;

import java.util.*;

import org.remoteme.client.model.ARemoteMeMessage;
import org.remoteme.client.model.UserMessage;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class ArliterestexampleApi {
  String basePath = "https://127.0.0.1:8082";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * getMessageType
   * 
   * @param pam pam
   * @param aRLiteToken generated token
   * @return ARemoteMeMessage
   */
  public ARemoteMeMessage  getMessageTypeUsingPOST (ARemoteMeMessage pam, String aRLiteToken) throws ApiException {
    Object localVarPostBody = pam;
    // verify the required parameter 'pam' is set
    if (pam == null) {
       throw new ApiException(400, "Missing the required parameter 'pam' when calling getMessageTypeUsingPOST");
    }

    // create path and map variables
    String localVarPath = "/arLite/restExample/v1/getMessageType/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (ARemoteMeMessage) ApiInvoker.deserialize(localVarResponse, "", ARemoteMeMessage.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * getUserMessage
   * 
   * @param aRLiteToken generated token
   * @return UserMessage
   */
  public UserMessage  getUserMessageUsingGET (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/restExample/v1/getUserMessage/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (UserMessage) ApiInvoker.deserialize(localVarResponse, "", UserMessage.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
