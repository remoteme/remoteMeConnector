/**
 * Remoteme rest for advanced integration
 * If You want i can hide it but there is nothing danger
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@remoteme.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.remoteme.client.api;

import org.remoteme.client.invoker.ApiException;
import org.remoteme.client.invoker.ApiInvoker;
import org.remoteme.client.invoker.Pair;

import org.remoteme.client.model.*;

import java.util.*;

import org.remoteme.client.model.VariableDto;
import org.remoteme.client.model.VariableSchedulerDto;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class ArvariablesrestApi {
  String basePath = "https://app.remoteme.org";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * add new Scheduler
   * add new VariableScheduler id is ignored
   * @param variableSchedulerDto variableSchedulerDto
   * @param variableName Variable name
   * @param variableType Variable type
   * @param aRLiteToken generated token
   * @return VariableSchedulerDto
   */
  public VariableSchedulerDto  addSchedulerUsingPOST (VariableSchedulerDto variableSchedulerDto, String variableName, String variableType, String aRLiteToken) throws ApiException {
    Object localVarPostBody = variableSchedulerDto;
    // verify the required parameter 'variableSchedulerDto' is set
    if (variableSchedulerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'variableSchedulerDto' when calling addSchedulerUsingPOST");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
       throw new ApiException(400, "Missing the required parameter 'variableName' when calling addSchedulerUsingPOST");
    }
    // verify the required parameter 'variableType' is set
    if (variableType == null) {
       throw new ApiException(400, "Missing the required parameter 'variableType' when calling addSchedulerUsingPOST");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/{variableName}/{variableType}/schedulers/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "variableName" + "\\}", apiInvoker.escapeString(variableName.toString())).replaceAll("\\{" + "variableType" + "\\}", apiInvoker.escapeString(variableType.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (VariableSchedulerDto) ApiInvoker.deserialize(localVarResponse, "", VariableSchedulerDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * add variables
   * return enw created variable, mode is set as local
   * @param v v
   * @param aRLiteToken generated token
   * @return VariableDto
   */
  public VariableDto  createVariableUsingPOST (VariableDto v, String aRLiteToken) throws ApiException {
    Object localVarPostBody = v;
    // verify the required parameter 'v' is set
    if (v == null) {
       throw new ApiException(400, "Missing the required parameter 'v' when calling createVariableUsingPOST");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (VariableDto) ApiInvoker.deserialize(localVarResponse, "", VariableDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * get schedulers for variable
   * Get schedulers for variable
   * @param variableType variableType
   * @param type Variable type
   * @param variableName Variable name
   * @param aRLiteToken generated token
   * @return List<VariableSchedulerDto>
   */
  public List<VariableSchedulerDto>  getSchedulersUsingGET (String variableType, String type, String variableName, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'variableType' is set
    if (variableType == null) {
       throw new ApiException(400, "Missing the required parameter 'variableType' when calling getSchedulersUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
       throw new ApiException(400, "Missing the required parameter 'type' when calling getSchedulersUsingGET");
    }
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
       throw new ApiException(400, "Missing the required parameter 'variableName' when calling getSchedulersUsingGET");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/{variableName}/{variableType}/schedulers/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "variableType" + "\\}", apiInvoker.escapeString(variableType.toString())).replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "variableName" + "\\}", apiInvoker.escapeString(variableName.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<VariableSchedulerDto>) ApiInvoker.deserialize(localVarResponse, "array", VariableSchedulerDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * get all local variables
   * If network device created WEbSocketServer for local connection it will return localIP and port othervise null is return
   * @param aRLiteToken generated token
   * @return List<VariableDto>
   */
  public List<VariableDto>  getVariablesUsingGET (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<VariableDto>) ApiInvoker.deserialize(localVarResponse, "array", VariableDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * add new Scheduler
   * update VariableScheduler
   * @param schedulerId schedulerId
   * @param aRLiteToken generated token
   * @return Object
   */
  public Object  removeSchedulerUsingDELETE (Integer schedulerId, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'schedulerId' is set
    if (schedulerId == null) {
       throw new ApiException(400, "Missing the required parameter 'schedulerId' when calling removeSchedulerUsingDELETE");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/schedulers/{schedulerId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "schedulerId" + "\\}", apiInvoker.escapeString(schedulerId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * remove variable
   * return rmeoved variable
   * @param variableName variableName
   * @param variableType variableType
   * @param aRLiteToken generated token
   * @return VariableDto
   */
  public VariableDto  removeVariableUsingDELETE (String variableName, String variableType, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
       throw new ApiException(400, "Missing the required parameter 'variableName' when calling removeVariableUsingDELETE");
    }
    // verify the required parameter 'variableType' is set
    if (variableType == null) {
       throw new ApiException(400, "Missing the required parameter 'variableType' when calling removeVariableUsingDELETE");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/{variableName}/{variableType}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "variableName" + "\\}", apiInvoker.escapeString(variableName.toString())).replaceAll("\\{" + "variableType" + "\\}", apiInvoker.escapeString(variableType.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (VariableDto) ApiInvoker.deserialize(localVarResponse, "", VariableDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * add new Scheduler
   * update VariableScheduler
   * @param variableSchedulerDto variableSchedulerDto
   * @param aRLiteToken generated token
   * @return Object
   */
  public Object  updateSchedulerUsingPUT (VariableSchedulerDto variableSchedulerDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = variableSchedulerDto;
    // verify the required parameter 'variableSchedulerDto' is set
    if (variableSchedulerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'variableSchedulerDto' when calling updateSchedulerUsingPUT");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/schedulers/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Object) ApiInvoker.deserialize(localVarResponse, "", Object.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * update variables
   * the variable type
   * @param variableName variableName
   * @param variableType variableType
   * @param v v
   * @param aRLiteToken generated token
   * @return VariableDto
   */
  public VariableDto  updateVariableUsingPUT (String variableName, String variableType, VariableDto v, String aRLiteToken) throws ApiException {
    Object localVarPostBody = v;
    // verify the required parameter 'variableName' is set
    if (variableName == null) {
       throw new ApiException(400, "Missing the required parameter 'variableName' when calling updateVariableUsingPUT");
    }
    // verify the required parameter 'variableType' is set
    if (variableType == null) {
       throw new ApiException(400, "Missing the required parameter 'variableType' when calling updateVariableUsingPUT");
    }
    // verify the required parameter 'v' is set
    if (v == null) {
       throw new ApiException(400, "Missing the required parameter 'v' when calling updateVariableUsingPUT");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/variables/{variableName}/{variableType}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "variableName" + "\\}", apiInvoker.escapeString(variableName.toString())).replaceAll("\\{" + "variableType" + "\\}", apiInvoker.escapeString(variableType.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (VariableDto) ApiInvoker.deserialize(localVarResponse, "", VariableDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
